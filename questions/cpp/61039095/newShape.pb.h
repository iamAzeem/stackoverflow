// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: newShape.proto

#ifndef PROTOBUF_newShape_2eproto__INCLUDED
#define PROTOBUF_newShape_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace myProject {
namespace protobuf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_newShape_2eproto();
void protobuf_AssignDesc_newShape_2eproto();
void protobuf_ShutdownFile_newShape_2eproto();

class NewShape;
class NewShape_Polygon;
class NewShape_Shape;

enum NewShape_Polygon_PolygonType {
  NewShape_Polygon_PolygonType_POLY_TYPE_OUTER = 1,
  NewShape_Polygon_PolygonType_POLY_TYPE_INNER = 2
};
bool NewShape_Polygon_PolygonType_IsValid(int value);
const NewShape_Polygon_PolygonType NewShape_Polygon_PolygonType_PolygonType_MIN = NewShape_Polygon_PolygonType_POLY_TYPE_OUTER;
const NewShape_Polygon_PolygonType NewShape_Polygon_PolygonType_PolygonType_MAX = NewShape_Polygon_PolygonType_POLY_TYPE_INNER;
const int NewShape_Polygon_PolygonType_PolygonType_ARRAYSIZE = NewShape_Polygon_PolygonType_PolygonType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NewShape_Polygon_PolygonType_descriptor();
inline const ::std::string& NewShape_Polygon_PolygonType_Name(NewShape_Polygon_PolygonType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NewShape_Polygon_PolygonType_descriptor(), value);
}
inline bool NewShape_Polygon_PolygonType_Parse(
    const ::std::string& name, NewShape_Polygon_PolygonType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NewShape_Polygon_PolygonType>(
    NewShape_Polygon_PolygonType_descriptor(), name, value);
}
// ===================================================================

class NewShape_Polygon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:myProject.protobuf.NewShape.Polygon) */ {
 public:
  NewShape_Polygon();
  virtual ~NewShape_Polygon();

  NewShape_Polygon(const NewShape_Polygon& from);

  inline NewShape_Polygon& operator=(const NewShape_Polygon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewShape_Polygon& default_instance();

  void Swap(NewShape_Polygon* other);

  // implements Message ----------------------------------------------

  inline NewShape_Polygon* New() const { return New(NULL); }

  NewShape_Polygon* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewShape_Polygon& from);
  void MergeFrom(const NewShape_Polygon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NewShape_Polygon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NewShape_Polygon_PolygonType PolygonType;
  static const PolygonType POLY_TYPE_OUTER =
    NewShape_Polygon_PolygonType_POLY_TYPE_OUTER;
  static const PolygonType POLY_TYPE_INNER =
    NewShape_Polygon_PolygonType_POLY_TYPE_INNER;
  static inline bool PolygonType_IsValid(int value) {
    return NewShape_Polygon_PolygonType_IsValid(value);
  }
  static const PolygonType PolygonType_MIN =
    NewShape_Polygon_PolygonType_PolygonType_MIN;
  static const PolygonType PolygonType_MAX =
    NewShape_Polygon_PolygonType_PolygonType_MAX;
  static const int PolygonType_ARRAYSIZE =
    NewShape_Polygon_PolygonType_PolygonType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PolygonType_descriptor() {
    return NewShape_Polygon_PolygonType_descriptor();
  }
  static inline const ::std::string& PolygonType_Name(PolygonType value) {
    return NewShape_Polygon_PolygonType_Name(value);
  }
  static inline bool PolygonType_Parse(const ::std::string& name,
      PolygonType* value) {
    return NewShape_Polygon_PolygonType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .myProject.protobuf.NewShape.Polygon.PolygonType type = 1 [default = POLY_TYPE_OUTER];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::myProject::protobuf::NewShape_Polygon_PolygonType type() const;
  void set_type(::myProject::protobuf::NewShape_Polygon_PolygonType value);

  // repeated uint32 point = 2 [packed = true];
  int point_size() const;
  void clear_point();
  static const int kPointFieldNumber = 2;
  ::google::protobuf::uint32 point(int index) const;
  void set_point(int index, ::google::protobuf::uint32 value);
  void add_point(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      point() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_point();

  // @@protoc_insertion_point(class_scope:myProject.protobuf.NewShape.Polygon)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > point_;
  mutable int _point_cached_byte_size_;
  int type_;
  friend void  protobuf_AddDesc_newShape_2eproto();
  friend void protobuf_AssignDesc_newShape_2eproto();
  friend void protobuf_ShutdownFile_newShape_2eproto();

  void InitAsDefaultInstance();
  static NewShape_Polygon* default_instance_;
};
// -------------------------------------------------------------------

class NewShape_Shape : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:myProject.protobuf.NewShape.Shape) */ {
 public:
  NewShape_Shape();
  virtual ~NewShape_Shape();

  NewShape_Shape(const NewShape_Shape& from);

  inline NewShape_Shape& operator=(const NewShape_Shape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewShape_Shape& default_instance();

  void Swap(NewShape_Shape* other);

  // implements Message ----------------------------------------------

  inline NewShape_Shape* New() const { return New(NULL); }

  NewShape_Shape* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewShape_Shape& from);
  void MergeFrom(const NewShape_Shape& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NewShape_Shape* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .myProject.protobuf.NewShape.Polygon polygon = 1;
  int polygon_size() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 1;
  const ::myProject::protobuf::NewShape_Polygon& polygon(int index) const;
  ::myProject::protobuf::NewShape_Polygon* mutable_polygon(int index);
  ::myProject::protobuf::NewShape_Polygon* add_polygon();
  ::google::protobuf::RepeatedPtrField< ::myProject::protobuf::NewShape_Polygon >*
      mutable_polygon();
  const ::google::protobuf::RepeatedPtrField< ::myProject::protobuf::NewShape_Polygon >&
      polygon() const;

  // @@protoc_insertion_point(class_scope:myProject.protobuf.NewShape.Shape)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::myProject::protobuf::NewShape_Polygon > polygon_;
  friend void  protobuf_AddDesc_newShape_2eproto();
  friend void protobuf_AssignDesc_newShape_2eproto();
  friend void protobuf_ShutdownFile_newShape_2eproto();

  void InitAsDefaultInstance();
  static NewShape_Shape* default_instance_;
};
// -------------------------------------------------------------------

class NewShape : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:myProject.protobuf.NewShape) */ {
 public:
  NewShape();
  virtual ~NewShape();

  NewShape(const NewShape& from);

  inline NewShape& operator=(const NewShape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewShape& default_instance();

  void Swap(NewShape* other);

  // implements Message ----------------------------------------------

  inline NewShape* New() const { return New(NULL); }

  NewShape* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewShape& from);
  void MergeFrom(const NewShape& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NewShape* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NewShape_Polygon Polygon;
  typedef NewShape_Shape Shape;

  // accessors -------------------------------------------------------

  // repeated .myProject.protobuf.NewShape.Shape shape = 2;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 2;
  const ::myProject::protobuf::NewShape_Shape& shape(int index) const;
  ::myProject::protobuf::NewShape_Shape* mutable_shape(int index);
  ::myProject::protobuf::NewShape_Shape* add_shape();
  ::google::protobuf::RepeatedPtrField< ::myProject::protobuf::NewShape_Shape >*
      mutable_shape();
  const ::google::protobuf::RepeatedPtrField< ::myProject::protobuf::NewShape_Shape >&
      shape() const;

  // @@protoc_insertion_point(class_scope:myProject.protobuf.NewShape)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::myProject::protobuf::NewShape_Shape > shape_;
  friend void  protobuf_AddDesc_newShape_2eproto();
  friend void protobuf_AssignDesc_newShape_2eproto();
  friend void protobuf_ShutdownFile_newShape_2eproto();

  void InitAsDefaultInstance();
  static NewShape* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NewShape_Polygon

// optional .myProject.protobuf.NewShape.Polygon.PolygonType type = 1 [default = POLY_TYPE_OUTER];
inline bool NewShape_Polygon::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewShape_Polygon::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewShape_Polygon::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewShape_Polygon::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::myProject::protobuf::NewShape_Polygon_PolygonType NewShape_Polygon::type() const {
  // @@protoc_insertion_point(field_get:myProject.protobuf.NewShape.Polygon.type)
  return static_cast< ::myProject::protobuf::NewShape_Polygon_PolygonType >(type_);
}
inline void NewShape_Polygon::set_type(::myProject::protobuf::NewShape_Polygon_PolygonType value) {
  assert(::myProject::protobuf::NewShape_Polygon_PolygonType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:myProject.protobuf.NewShape.Polygon.type)
}

// repeated uint32 point = 2 [packed = true];
inline int NewShape_Polygon::point_size() const {
  return point_.size();
}
inline void NewShape_Polygon::clear_point() {
  point_.Clear();
}
inline ::google::protobuf::uint32 NewShape_Polygon::point(int index) const {
  // @@protoc_insertion_point(field_get:myProject.protobuf.NewShape.Polygon.point)
  return point_.Get(index);
}
inline void NewShape_Polygon::set_point(int index, ::google::protobuf::uint32 value) {
  point_.Set(index, value);
  // @@protoc_insertion_point(field_set:myProject.protobuf.NewShape.Polygon.point)
}
inline void NewShape_Polygon::add_point(::google::protobuf::uint32 value) {
  point_.Add(value);
  // @@protoc_insertion_point(field_add:myProject.protobuf.NewShape.Polygon.point)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NewShape_Polygon::point() const {
  // @@protoc_insertion_point(field_list:myProject.protobuf.NewShape.Polygon.point)
  return point_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NewShape_Polygon::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:myProject.protobuf.NewShape.Polygon.point)
  return &point_;
}

// -------------------------------------------------------------------

// NewShape_Shape

// repeated .myProject.protobuf.NewShape.Polygon polygon = 1;
inline int NewShape_Shape::polygon_size() const {
  return polygon_.size();
}
inline void NewShape_Shape::clear_polygon() {
  polygon_.Clear();
}
inline const ::myProject::protobuf::NewShape_Polygon& NewShape_Shape::polygon(int index) const {
  // @@protoc_insertion_point(field_get:myProject.protobuf.NewShape.Shape.polygon)
  return polygon_.Get(index);
}
inline ::myProject::protobuf::NewShape_Polygon* NewShape_Shape::mutable_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:myProject.protobuf.NewShape.Shape.polygon)
  return polygon_.Mutable(index);
}
inline ::myProject::protobuf::NewShape_Polygon* NewShape_Shape::add_polygon() {
  // @@protoc_insertion_point(field_add:myProject.protobuf.NewShape.Shape.polygon)
  return polygon_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::myProject::protobuf::NewShape_Polygon >*
NewShape_Shape::mutable_polygon() {
  // @@protoc_insertion_point(field_mutable_list:myProject.protobuf.NewShape.Shape.polygon)
  return &polygon_;
}
inline const ::google::protobuf::RepeatedPtrField< ::myProject::protobuf::NewShape_Polygon >&
NewShape_Shape::polygon() const {
  // @@protoc_insertion_point(field_list:myProject.protobuf.NewShape.Shape.polygon)
  return polygon_;
}

// -------------------------------------------------------------------

// NewShape

// repeated .myProject.protobuf.NewShape.Shape shape = 2;
inline int NewShape::shape_size() const {
  return shape_.size();
}
inline void NewShape::clear_shape() {
  shape_.Clear();
}
inline const ::myProject::protobuf::NewShape_Shape& NewShape::shape(int index) const {
  // @@protoc_insertion_point(field_get:myProject.protobuf.NewShape.shape)
  return shape_.Get(index);
}
inline ::myProject::protobuf::NewShape_Shape* NewShape::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:myProject.protobuf.NewShape.shape)
  return shape_.Mutable(index);
}
inline ::myProject::protobuf::NewShape_Shape* NewShape::add_shape() {
  // @@protoc_insertion_point(field_add:myProject.protobuf.NewShape.shape)
  return shape_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::myProject::protobuf::NewShape_Shape >*
NewShape::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:myProject.protobuf.NewShape.shape)
  return &shape_;
}
inline const ::google::protobuf::RepeatedPtrField< ::myProject::protobuf::NewShape_Shape >&
NewShape::shape() const {
  // @@protoc_insertion_point(field_list:myProject.protobuf.NewShape.shape)
  return shape_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace myProject

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::myProject::protobuf::NewShape_Polygon_PolygonType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::myProject::protobuf::NewShape_Polygon_PolygonType>() {
  return ::myProject::protobuf::NewShape_Polygon_PolygonType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_newShape_2eproto__INCLUDED
